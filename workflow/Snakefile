import pandas as pd
import math
import sys
import os
from snakemake.utils import min_version

min_version("7.30.0")

# Force users to use the same underlying OS via singularity.
# container: "docker://continuumio/miniconda3"
# container: "docker://mambaorg/micromamba"

ref = config["ref"]
ref_name = config["ref_name"]
n_chunks = config["n_chunks"]
chunks = [f"{i+1}-of-{n_chunks}" for i in range(n_chunks)]
excludes = config["excludes"]
dhs = config["dhs"]
max_t = config.get("max_t", 4)
max_bins = config.get("max_bins", 75)
keep_chrs = config.get("keep_chromosomes", ".*")
force_coverage = config.get("force_coverage", None)

# coverage requirements
min_coverage = config.get("min_coverage", 4)
coverage_within_n_sd = config.get("coverage_within_n_sd", 5)

# sample, haplotype, and chromosome wildcard building
fai = pd.read_csv(f"{ref}.fai", sep="\t", names=["chr", "length", "x", "y", "z"])
conda = config.get("env", "../envs/env.yaml")
bins = list(range(1, max_bins + 1))
data = pd.read_csv(config["manifest"], sep="\s+", comment="#").set_index("sample")
haps = ["all", "hap1", "hap2", "unk"]
not_all = ["hap1", "hap2", "unk"]
not_unk = ["all", "hap1", "hap2"]
min_fire_fdr = config.get("min_fire_fdr", 0.10)
print(data.index)

types = ["fdr", "acc", "link", "nuc"]
types_to_col = {"fdr": 4, "acc": 5, "link": 6, "nuc": 7}

bw_types = ["score", "FDR", "log_FDR"]
bw_types = bw_types + [f"{t}_H1" for t in bw_types] + [f"{t}_H2" for t in bw_types]


include: "rules/common.smk"
include: "rules/coverages.smk"
include: "rules/train-model.smk"
include: "rules/apply-model.smk"
include: "rules/FDR-peaks.smk"
include: "rules/peak-calling.smk"
include: "rules/track-hub.smk"


chroms = get_chroms()


wildcard_constraints:
    chrom="|".join(chroms),
    call="|".join(["msp", "m6a"]),
    chunk="|".join(chunks),
    sm="|".join(data.index),
    types="|".join(types),
    fdr="\d+",
    hp="|".join(haps),
    col="|".join(bw_types),


localrules:
    bed_chunks,
    dhs_null,
    model_input,
    make_model,
    merge_model_results,
    model_bam,
    trackhub,
    average_coverage,
    clustering_vs_null,
    percent_in_clusters,
    fire_peaks,
    hap_differences,
    peaks_vs_percent,


rule all:
    input:
        # coverage information
        expand(rules.genome_bedgraph.output, sm=data.index),
        expand(rules.average_coverage.output, sm=data.index),
        # model results
        expand(rules.merge_model_results.output, sm=data.index, hp=haps),
        expand(rules.index_model_results.output, sm=data.index, hp=haps),
        # fiber locations and calls
        expand(rules.fiber_locations.output, sm=data.index),
        expand(rules.filtered_and_shuffled_fiber_locations.output, sm=data.index),
        expand(
            rules.element_coverages.output,
            sm=data.index,
            hp=not_unk,
            el_type=["nucleosome", "linker", "fire"],
        ),
        # FDR results
        expand(rules.fdr_track.output, sm=data.index),
        # trackhub
        expand(rules.fdr_table_to_bw.output.bw, sm=data.index, col=bw_types),
        # misc
        expand("results/{sm}/trackHub/hub.txt", sm=data.index),
        expand(
            "results/{sm}/{hp}/fire.peaks.and.coverages.bed.gz", sm=data.index, hp=haps
        ),
        expand(
            rules.merge_binned_fire_calls.output.bb,
            sm=data.index,
            bin=bins,
            hp=not_all,
        ),
        expand(rules.clustering_vs_null.output.bed, sm=data.index),
        expand(rules.percent_in_clusters.output, sm=data.index),
        expand(rules.hap_differences.output, sm=data.index),
        expand(rules.hap_differences_track.output.bb, sm=data.index),
        expand(rules.fire_with_coverage.output, sm=data.index),
        expand(rules.peaks_vs_percent.output, sm=data.index),
        expand(rules.percent_accessible.output.bw, sm=data.index, hp=not_unk),
