import pandas as pd
import math
import sys
import os
from snakemake.utils import min_version

min_version("8.4.0")

# forces pandas pysam etc to be available in the environment
conda: "envs/runner.yaml"

# Force users to use the same underlying OS via singularity.
# container: "docker://condaforge/mambaforge:23.3.1-1"
# container: "docker://continuumio/miniconda3"


# setup shared functions
include: "rules/common.smk"


# reference genome and reference regions
REF = get_ref()
FAI = get_fai()
REF_NAME = config["ref_name"]
EXCLUDES = get_excludes()
KEEP_CHRS = config.get("keep_chromosomes", ".*")

# coverage requirements
MIN_COVERAGE = config.get("min_coverage", 4)
COVERAGE_WITHIN_N_SD = config.get("coverage_within_n_sd", 5)

# sample, haplotype, and chromosome wildcard building
FAI_DF = get_fai_df()
DEFAULT_ENV = config.get("env", "../envs/env.yaml")
MANIFEST = get_manifest()
MIN_FIRE_FDR = config.get("min_fire_fdr", 0.10)

# FDR / peak calling thresholds
MAX_PEAK_FDR = config.get("max_peak_fdr", 0.05)
MIN_PER_ACC_PEAK = config.get("min_per_acc_peak", None)
if MIN_PER_ACC_PEAK is None:
    MIN_PER_ACC_PEAK = 0.0
else:
    MAX_PEAK_FDR = 1.0
MIN_FRAC_ACCESSIBLE = config.get("min_frac_accessible", 0)

# Misc sets of wildcards
haps = ["all", "hap1", "hap2", "unk"]
not_unk = ["all", "hap1", "hap2"]
types = ["fdr", "acc", "link", "nuc"]
types_to_col = {"fdr": 4, "acc": 5, "link": 6, "nuc": 7}
bw_types = ["log_FDR"]  # "score", "FDR",
bw_types = bw_types + [f"{t}_H1" for t in bw_types] + [f"{t}_H2" for t in bw_types]
el_types = ["fire", "linker", "nucleosome"]


include: "rules/apply-model.smk"
include: "rules/coverages.smk"
include: "rules/FDR-peaks.smk"
include: "rules/peak-stats.smk"
include: "rules/decorated-reads.smk"
include: "rules/track-hub.smk"


wildcard_constraints:
    chrom="|".join(get_chroms()),
    call="|".join(["msp", "m6a"]),
    sm="|".join(MANIFEST.index),
    types="|".join(types),
    fdr=r"\d+",
    hp="|".join(haps),
    col="|".join(bw_types),
    el_type="|".join(el_types),


localrules:
    trackhub,


rule all:
    input:
        # coverage information
        expand(rules.genome_bedgraph.output, sm=MANIFEST.index),
        expand(rules.coverage.output, sm=MANIFEST.index),
        expand(rules.exclude_from_shuffle.output, sm=MANIFEST.index),
        expand(rules.unreliable_coverage_regions.output, sm=MANIFEST.index),
        # model results
        expand(rules.fire_sites.output, sm=MANIFEST.index),
        # fiber locations
        expand(rules.fiber_locations.output, sm=MANIFEST.index),
        expand(rules.filtered_and_shuffled_fiber_locations.output, sm=MANIFEST.index),
        # coverage of elements
        expand(
            rules.element_coverages.output,
            sm=MANIFEST.index,
            hp=not_unk,
            el_type=el_types,
        ),
        # FDR results
        expand(rules.fdr_track.output, sm=MANIFEST.index),
        expand(rules.fdr_peaks_by_fire_elements.output, sm=MANIFEST.index),
        expand(rules.wide_fdr_peaks.output, sm=MANIFEST.index),
        expand(rules.peaks_vs_percent.output, sm=MANIFEST.index),
        expand(rules.one_percent_fdr_peaks.output, sm=MANIFEST.index),
        # trackhub
        expand(rules.fdr_track_to_bw.output.bw, sm=MANIFEST.index, col=bw_types),
        expand(rules.fdr_peaks_by_fire_elements_to_bb.output.bb, sm=MANIFEST.index),
        expand(rules.percent_accessible.output.bw, hp=not_unk, sm=MANIFEST.index),
        expand(
            rules.element_coverages_bw.output.bw,
            sm=MANIFEST.index,
            hp=not_unk,
            el_type=el_types,
        ),
        expand(rules.trackhub.output, sm=MANIFEST.index),
