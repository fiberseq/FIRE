# pandas is a dependency of snakemake so a runner environment is not needed
# if I ever add this back because of new depedancies this must be the first line of the Snakefile
# conda: "envs/runner.yaml"

# TODO get the container working
# container: "docker://continuumio/miniconda3"

import pandas as pd
import math
import sys
import os
from snakemake.utils import min_version

min_version("8.21.0")


# setup shared functions
include: "rules/common.smk"


# load the version from the environment
FULL_VERSION = f"v{os.environ.get("PIXI_PROJECT_VERSION", "UNK")}"
# trim the FULL_VERSION to just the just the major and minor version
VERSION = ".".join(FULL_VERSION.split(".")[:2])

# thread options
MAX_THREADS = config.get("max_threads", 4)
SORT_THREADS = config.get("sort_threads", 8)

# reference genome and reference regions
REF = get_ref()
FAI = get_fai()
REF_NAME = config["ref_name"]
EXCLUDES = get_excludes()
KEEP_CHRS = config.get("keep_chromosomes", ".*")

# coverage requirements
MIN_COVERAGE = config.get("min_coverage", 4)
COVERAGE_WITHIN_N_SD = config.get("coverage_within_n_sd", 5)

# sample, haplotype, and chromosome wildcard building
FAI_DF = get_fai_df()
DEFAULT_ENV = config.get("env", "../envs/env.yaml")
MANIFEST = get_manifest()
MIN_FIRE_FDR = config.get("min_fire_fdr", 0.10)

# FDR / peak calling thresholds
MAX_PEAK_FDR = config.get("max_peak_fdr", 0.05)
MIN_PER_ACC_PEAK = config.get("min_per_acc_peak", None)
if MIN_PER_ACC_PEAK is None:
    MIN_PER_ACC_PEAK = 0.0
else:
    MAX_PEAK_FDR = 1.0
MIN_FRAC_ACCESSIBLE = config.get("min_frac_accessible", 0)

# data filtering
FILTER_FLAG = config.get("samtools-filter-flag", "260")  # 2308

# Misc options
NZOOMS = config.get("nzooms", 10)

# Misc sets of wildcards
haps = ["all", "hap1", "hap2", "unk"]
not_unk = ["all", "hap1", "hap2"]
all_only = ["all"]
types = ["fdr", "acc", "link", "nuc"]
types_to_col = {"fdr": 4, "acc": 5, "link": 6, "nuc": 7}
bw_types = ["log_FDR"]  # "score", "FDR",
el_types = ["fire", "linker", "nucleosome"]


# DSA options
DSA_CHAIN = config.get("chain", None)
DSA = DSA_CHAIN is not None
LEVIO_EXE = config.get("levio_exe", "leviosam2")

# developer options
FT_EXE = config.get("ft_exe", "ft")
if FT_EXE != "ft":
    print(f"INFO: Using FT_EXE: {FT_EXE}", file=sys.stderr)

ONT = config.get("ont", False)
if ONT:
    ont_ml = config.get("ont_ml", 0)
    if ont_ml != 0:
        USE_ONT = f" --ont --ml {ont_ml} "
    else:
        USE_ONT = " --ont "
else:
    USE_ONT = ""
MIN_UNRELIABLE_COVERAGE_LEN = config.get("min_unreliable_coverage_len", 50)


include: "rules/apply-model.smk"
include: "rules/coverages.smk"
include: "rules/fire-peaks.smk"
include: "rules/stats.smk"
include: "rules/decorated-reads.smk"
include: "rules/track-hub.smk"


if DSA:

    include: "rules/levio.smk"


wildcard_constraints:
    chrom="|".join(get_chroms()),
    call="|".join(["msp", "m6a"]),
    sm="|".join(MANIFEST.index),
    types="|".join(types),
    fdr=r"\d+",
    hp="|".join(haps),
    col="|".join(bw_types),
    el_type="|".join(el_types),
    v=VERSION,


localrules:
    trackhub,


rule all:
    input:
        # coverage information
        expand(rules.coverage.output, sm=MANIFEST.index, v=VERSION),
        expand(rules.exclude_from_shuffle.output, sm=MANIFEST.index, v=VERSION),
        expand(rules.unreliable_coverage_regions.output, sm=MANIFEST.index, v=VERSION),
        expand(
            rules.pileup.output.bed,
            sm=MANIFEST.index,
            v=VERSION,
        ),
        # model results
        expand(rules.fire.output.cram, sm=MANIFEST.index, v=VERSION),
        expand(rules.fire_sites.output, sm=MANIFEST.index, v=VERSION),
        # Stats and Tables
        expand(rules.fires_in_peaks.output.txt, sm=MANIFEST.index, v=VERSION),
        expand(rules.ft_qc.output.tbl, sm=MANIFEST.index, v=VERSION),
        # FIRE peaks
        expand(rules.fdr_table.output.tbl, sm=MANIFEST.index, v=VERSION),
        expand(rules.pileup.output.bed, sm=MANIFEST.index, v=VERSION),
        expand(rules.fire_peaks.output.bed, sm=MANIFEST.index, v=VERSION),
        expand(rules.wide_fire_peaks.output.bed, sm=MANIFEST.index, v=VERSION),
        expand(rules.one_percent_fire_peaks.output.bed, sm=MANIFEST.index, v=VERSION),
        expand(rules.peaks_vs_percent.output.fig1, sm=MANIFEST.index, v=VERSION),
        # haplotype differences
        expand(rules.hap_differences.output.fig1, sm=MANIFEST.index, v=VERSION),
        expand(rules.hap_differences.output.fig2, sm=MANIFEST.index, v=VERSION),
        expand(rules.hap_differences.output.bed, sm=MANIFEST.index, v=VERSION),
        # trackhub
        expand(rules.fire_peaks_bb.output.bb, sm=MANIFEST.index, v=VERSION),
        expand(
            rules.percent_accessible.output.bw,
            hp=not_unk,
            sm=MANIFEST.index,
            v=VERSION,
        ),
        expand(rules.decorate_fibers_1.output.bb, sm=MANIFEST.index, v=VERSION),
        expand(rules.decorate_fibers_2.output.bb, sm=MANIFEST.index, v=VERSION),
        expand(rules.hap_differences_track.output.bb, sm=MANIFEST.index, v=VERSION),
        expand(
            rules.element_coverages_bw.output.bw,
            sm=MANIFEST.index,
            hp=all_only,
            el_type=el_types,
            v=VERSION,
        ),
        expand(rules.trackhub.output.hub, sm=MANIFEST.index, v=VERSION),


# UNUSED
# expand(rules.fdr_track_to_bw.output.bw, sm=MANIFEST.index, col=bw_types),
